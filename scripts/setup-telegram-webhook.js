#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/setup-telegram-webhook.js
 */

const https = require('https');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' });

const BOT_TOKEN = process.env.PARSER_TELEGRAM_BOT_TOKEN;
const WEBHOOK_URL = process.env.PARSER_TELEGRAM_WEBHOOK_URL;
const WEBHOOK_SECRET = process.env.PARSER_TELEGRAM_WEBHOOK_SECRET;

if (!BOT_TOKEN || !WEBHOOK_URL || !WEBHOOK_SECRET) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
  console.error('- PARSER_TELEGRAM_BOT_TOKEN');
  console.error('- PARSER_TELEGRAM_WEBHOOK_URL');
  console.error('- PARSER_TELEGRAM_WEBHOOK_SECRET');
  process.exit(1);
}

const webhookUrl = `${WEBHOOK_URL}/api/telegram/webhook`;

console.log('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook...');
console.log(`üì° URL: ${webhookUrl}`);
console.log(`üîë Secret: ${WEBHOOK_SECRET.substring(0, 8)}...`);

const postData = JSON.stringify({
  url: webhookUrl,
  secret_token: WEBHOOK_SECRET,
  drop_pending_updates: true
});

const options = {
  hostname: 'api.telegram.org',
  port: 443,
  path: `/bot${BOT_TOKEN}/setWebhook`,
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

const req = https.request(options, (res) => {
  let data = '';

  res.on('data', (chunk) => {
    data += chunk;
  });

  res.on('end', () => {
    try {
      const result = JSON.parse(data);
      
      if (result.ok) {
        console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        console.log(`üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${result.description}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook info
        checkWebhookInfo();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:');
        console.error(`üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${result.description}`);
        process.exit(1);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error.message);
      console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
      process.exit(1);
    }
  });
});

req.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  process.exit(1);
});

req.write(postData);
req.end();

function checkWebhookInfo() {
  const options = {
    hostname: 'api.telegram.org',
    port: 443,
    path: `/bot${BOT_TOKEN}/getWebhookInfo`,
    method: 'GET'
  };

  const req = https.request(options, (res) => {
    let data = '';

    res.on('data', (chunk) => {
      data += chunk;
    });

    res.on('end', () => {
      try {
        const result = JSON.parse(data);
        
        if (result.ok) {
          const info = result.result;
          console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
          console.log(`üîó URL: ${info.url}`);
          console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${info.last_error_date || '–ù–µ—Ç'}`);
          console.log(`‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${info.pending_update_count || 0}`);
          console.log(`üìà –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${info.pending_update_count || 0}`);
          
          if (info.last_error_message) {
            console.log(`‚ö†Ô∏è  –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${info.last_error_message}`);
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error.message);
      }
    });
  });

  req.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error.message);
  });

  req.end();
}
