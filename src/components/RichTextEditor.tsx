'use client';

import { useRef, useEffect, useState } from 'react';

interface RichTextEditorProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
}

export default function RichTextEditor({ 
  value, 
  onChange, 
  placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...", 
  className = "" 
}: RichTextEditorProps) {
  const editorRef = useRef<HTMLDivElement>(null);
  const [isFocused, setIsFocused] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const execCommand = (command: string, value?: string): boolean => {
    if (editorRef.current) {
      editorRef.current.focus();
      const success = document.execCommand(command, false, value);
      if (!success) {
        console.warn(`Command ${command} failed`);
      }
      return success;
    }
    return false;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
  const handleInput = () => {
    if (editorRef.current) {
      onChange(editorRef.current.innerHTML);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
  const handleLink = () => {
    const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL —Å—Å—ã–ª–∫–∏:');
    if (url && url.trim()) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      const selection = window.getSelection();
      const selectedText = selection?.toString().trim();
      
      if (selectedText) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
        const success = execCommand('createLink', url);
        if (!success) {
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∑–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Å—ã–ª–∫—É
          const linkHtml = `<a href="${url}" target="_blank" rel="noopener noreferrer">${selectedText}</a>`;
          execCommand('insertHTML', linkHtml);
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤—Å—Ç–∞–≤–ª—è–µ–º URL –∫–∞–∫ —Å—Å—ã–ª–∫—É
        const linkText = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏:', url);
        if (linkText) {
          const linkHtml = `<a href="${url}" target="_blank" rel="noopener noreferrer">${linkText}</a>`;
          execCommand('insertHTML', linkHtml);
        }
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
  const handleUnorderedList = () => {
    const success = execCommand('insertUnorderedList');
    if (!success) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—Å—Ç–∞–≤–ª—è–µ–º HTML –Ω–∞–ø—Ä—è–º—É—é
      const listHtml = '<ul><li>–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞</li></ul>';
      execCommand('insertHTML', listHtml);
    }
  };

  const handleOrderedList = () => {
    const success = execCommand('insertOrderedList');
    if (!success) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—Å—Ç–∞–≤–ª—è–µ–º HTML –Ω–∞–ø—Ä—è–º—É—é
      const listHtml = '<ol><li>–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞</li></ol>';
      execCommand('insertHTML', listHtml);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
  const handleKeyDown = (e: React.KeyboardEvent) => {
    // Ctrl+B –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if (e.ctrlKey && e.key === 'b') {
      e.preventDefault();
      execCommand('bold');
    }
    // Ctrl+I –¥–ª—è –∫—É—Ä—Å–∏–≤–∞
    if (e.ctrlKey && e.key === 'i') {
      e.preventDefault();
      execCommand('italic');
    }
    // Ctrl+K –¥–ª—è —Å—Å—ã–ª–∫–∏
    if (e.ctrlKey && e.key === 'k') {
      e.preventDefault();
      handleLink();
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    if (editorRef.current && !editorRef.current.innerHTML && value) {
      editorRef.current.innerHTML = value;
    }
  }, [value]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ value (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ)
  useEffect(() => {
    if (editorRef.current && editorRef.current.innerHTML !== value && !isFocused) {
      editorRef.current.innerHTML = value;
    }
  }, [value, isFocused]);

  return (
    <div className={`rich-text-editor border border-gray-300 rounded-lg ${className}`}>
      {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      <div className="flex flex-wrap gap-1 p-2 border-b border-gray-200 bg-gray-50">
        <button
          type="button"
          onClick={() => execCommand('bold')}
          className="px-2 py-1 text-sm font-bold border border-gray-300 rounded hover:bg-gray-200 cursor-pointer"
          title="–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (Ctrl+B)"
        >
          B
        </button>
        <button
          type="button"
          onClick={() => execCommand('italic')}
          className="px-2 py-1 text-sm italic border border-gray-300 rounded hover:bg-gray-200 cursor-pointer"
          title="–ö—É—Ä—Å–∏–≤ (Ctrl+I)"
        >
          I
        </button>
        <button
          type="button"
          onClick={() => execCommand('underline')}
          className="px-2 py-1 text-sm underline border border-gray-300 rounded hover:bg-gray-200 cursor-pointer"
          title="–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π"
        >
          U
        </button>
        <div className="w-px h-6 bg-gray-300 mx-1"></div>
        <button
          type="button"
          onClick={handleUnorderedList}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-200 cursor-pointer"
          title="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        >
          ‚Ä¢ –°–ø–∏—Å–æ–∫
        </button>
        <button
          type="button"
          onClick={handleOrderedList}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-200 cursor-pointer"
          title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        >
          1. –°–ø–∏—Å–æ–∫
        </button>
        <div className="w-px h-6 bg-gray-300 mx-1"></div>
        <button
          type="button"
          onClick={handleLink}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-200 cursor-pointer"
          title="–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É (Ctrl+K)"
        >
          üîó –°—Å—ã–ª–∫–∞
        </button>
        <button
          type="button"
          onClick={() => execCommand('removeFormat')}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-200 cursor-pointer"
          title="–£–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        >
          –û—á–∏—Å—Ç–∏—Ç—å
        </button>
        <div className="w-px h-6 bg-gray-300 mx-1"></div>
        <button
          type="button"
          onClick={() => {
            const testHtml = '<p><strong>–¢–µ—Å—Ç</strong> <em>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</em> <u>—Ç–µ–∫—Å—Ç–∞</u></p><ul><li>–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 1</li><li>–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 2</li></ul><p><a href="https://example.com">–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏</a></p>';
            execCommand('insertHTML', testHtml);
          }}
          className="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-200 cursor-pointer"
          title="–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
        >
          –¢–µ—Å—Ç
        </button>
      </div>

      {/* –†–µ–¥–∞–∫—Ç–æ—Ä */}
      <div
        ref={editorRef}
        contentEditable
        onInput={handleInput}
        onKeyDown={handleKeyDown}
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
        className={`min-h-[120px] p-3 focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-900 focus-visible:border-transparent ${
          isFocused ? 'ring-2 ring-gray-900' : ''
        }`}
        style={{ minHeight: '120px' }}
        data-placeholder={placeholder}
        suppressContentEditableWarning={true}
      />

      {/* –°—Ç–∏–ª–∏ –¥–ª—è placeholder */}
      <style jsx>{`
        [contenteditable]:empty:before {
          content: attr(data-placeholder);
          color: #9ca3af;
          pointer-events: none;
        }
        [contenteditable]:focus:before {
          content: none;
        }
      `}</style>
    </div>
  );
}
